generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
  email    String
  role     Role  
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  deletedAt  DateTime?

  song Song[]
  playlist Playlist[]
  downloadPermission DownloadPermission[]
}

model Genre {
  id       Int    @id @default(autoincrement())
  genreName String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  deletedAt  DateTime?

  subGenre SubGenre[]
  song Song[]
 
}

model SubGenre {
  id          Int    @id @default(autoincrement())
  subGenreName String
  genreId     Int
  Genre       Genre  @relation(fields: [genreId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  deletedAt  DateTime?

  song Song[]

}

model Song {
  id          Int    @id @default(autoincrement())
  title       String
  singer      String
  coverSong   String?
  genreId     Int
  subGenreId  Int
  bpm         Int
  tempo       String
  vocal       Boolean
  duration    Int
  filePath    String
  uploadedBy  Int
  Genre       Genre   @relation(fields: [genreId], references: [id])
  SubGenre    SubGenre @relation(fields: [subGenreId], references: [id])
  User        User    @relation(fields: [uploadedBy], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  deletedAt  DateTime?

  playlistSong PlaylistSong[]
  downloadPermission DownloadPermission?
}

model Playlist {
  id          Int    @id @default(autoincrement())
  playlistName String
  createdBy   Int
  isPublic    Boolean
  User        User   @relation(fields: [createdBy], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  deletedAt  DateTime?

  playlistSong PlaylistSong[]
  downloadPermission DownloadPermission?
}

model PlaylistSong {
  id         Int    @id @default(autoincrement())
  playlistId Int
  songId     Int
  Playlist   Playlist @relation(fields: [playlistId], references: [id])
  Song       Song     @relation(fields: [songId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  deletedAt  DateTime?
}

model DownloadPermission {
  id         Int    @id @default(autoincrement())
  userId     Int
  songId     Int? @unique
  playlistId Int? @unique
  format     String
  User       User     @relation(fields: [userId], references: [id])
  Song       Song?    @relation(fields: [songId], references: [id])
  Playlist   Playlist? @relation(fields: [playlistId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  deletedAt  DateTime?
}
